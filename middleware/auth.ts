// export default defineNuxtRouteMiddleware((to, from) => {
//   const token = localStorage.getItem("token");
//   const user = localStorage.getItem("user");
//   // redirect the user to the login page
//   if (!token || !user) {
//     return navigateTo({
//       path: "/login",
//       query: {
//         redirect: to.fullPath,
//       },
//     });
//   }
// });
// middleware/auth.js - ‡∫•‡∫∞‡∫ö‡∫ª‡∫ö Authentication + Auto Logout ‡∫™‡∫ª‡∫°‡∫ö‡∫π‡∫ô

// ==========================================
// ‡∫ï‡∫ª‡∫ß‡∫õ‡ªà‡∫Ω‡∫ô‡∫™‡∫≥‡∫•‡∫±‡∫ö‡∫•‡∫∞‡∫ö‡∫ª‡∫ö Auto Logout
// ==========================================
let logoutTimer = null;
let warningTimer = null;
let isWarningShown = false;

// ‡∫ï‡∫±‡ªâ‡∫á‡ªÄ‡∫ß‡∫•‡∫≤ (‡ªÄ‡∫õ‡∫±‡∫ô‡∫°‡∫¥‡∫ô‡∫•‡∫¥‡∫ß‡∫¥‡∫ô‡∫≤‡∫ó‡∫µ)
const INACTIVE_TIME =  5* 60 * 1000; // 5 ‡∫ô‡∫≤‡∫ó‡∫µ = 300,000 ms
const WARNING_TIME = 2 * 60 * 1000;  // 4 ‡∫ô‡∫≤‡∫ó‡∫µ (‡ªÄ‡∫ï‡∫∑‡∫≠‡∫ô‡∫Å‡ªà‡∫≠‡∫ô 1 ‡∫ô‡∫≤‡∫ó‡∫µ)

// Events ‡∫ó‡∫µ‡ªà‡∫ñ‡∫∑‡∫ß‡ªà‡∫≤‡ªÄ‡∫õ‡∫±‡∫ô‡∫Å‡∫≤‡∫ô‡ªÄ‡∫Ñ‡∫∑‡ªà‡∫≠‡∫ô‡ªÑ‡∫´‡∫ß
const ACTIVITY_EVENTS = [
  'mousedown',
  'mousemove', 
  'keypress',
  'scroll',
  'touchstart',
  'click'
];

// ==========================================
// ‡∫ü‡∫±‡∫á‡∫ä‡∫±‡∫ô‡∫™‡∫≥‡∫•‡∫±‡∫ö Auto Logout
// ==========================================

function startAutoLogoutTimer() {
  // ‡∫Ç‡ªâ‡∫≤‡∫°‡∫ñ‡ªâ‡∫≤‡∫ö‡ªç‡ªà‡ªÉ‡∫ä‡ªà browser
  if (process.server) return;

  // ‡∫•‡ªâ‡∫≤‡∫á timer ‡ªÄ‡∫Å‡∫ª‡ªà‡∫≤
  clearTimeout(logoutTimer);
  clearTimeout(warningTimer);
  isWarningShown = false;

  // ‡∫õ‡∫¥‡∫î warning modal ‡∫ñ‡ªâ‡∫≤‡ªÄ‡∫õ‡∫µ‡∫î‡∫¢‡∫π‡ªà
  hideWarningModal();

 
  warningTimer = setTimeout(() => {
    showWarningModal();
  }, WARNING_TIME);

 
  logoutTimer = setTimeout(() => {
    performAutoLogout();
  }, INACTIVE_TIME);
}

function performAutoLogout() {
  if (process.server) return;

 
  localStorage.removeItem("token");
  localStorage.removeItem("user");
  localStorage.removeItem("lastActivity");
  

  clearTimeout(logoutTimer);
  clearTimeout(warningTimer);
  
  // ‡∫õ‡∫¥‡∫î warning modal
  hideWarningModal();
  
 CallSwal({
    title: "‡∫≠‡∫≠‡∫Å‡ªÄ‡∫•‡∫µ‡∫ç",
    text: "‡∫ó‡ªà‡∫≤‡∫ô‡ªÑ‡∫î‡ªâ‡∫ñ‡∫∑‡∫Å‡∫≠‡∫≠‡∫Å‡∫à‡∫≤‡∫Å‡∫•‡∫∞‡∫ö‡∫ª‡∫ö ‡ªÉ‡∫ô‡ªÄ‡∫ô‡∫∑‡ªâ‡∫≠‡ªÉ‡∫ô 5 ‡∫ô‡∫≤‡∫ó‡∫µ ‡∫ó‡ªà‡∫≤‡∫ô‡ªÑ‡∫î‡ªâ‡ªÄ‡∫Æ‡∫±‡∫î‡ªÄ‡∫ô",
    icon: "warning",
    confirmButtonText: "‡ªÄ‡∫Ç‡∫ª‡ªâ‡∫≤‡ªÉ‡∫ô‡ªú‡ªâ‡∫≤ Login",
 })
  

  window.location.href = "/login";
}

function showWarningModal() {
  if (process.server) return;
  if (isWarningShown) return;
  isWarningShown = true;

 
  const modal = document.createElement('div');
  modal.id = 'auto-logout-warning';
  modal.style.cssText = `
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.7);
    z-index: 9999;
    display: flex;
    justify-content: center;
    align-items: center;
    font-family: Arial, sans-serif;
  `;

  const modalContent = document.createElement('div');
  modalContent.style.cssText = `
    background: white;
    padding: 30px;
    border-radius: 10px;
    text-align: center;
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.3);
    max-width: 400px;
    margin: 20px;
  `;


  let countdown = 60; 
  
  modalContent.innerHTML = `
    <h3 style="color: #e74c3c; margin-bottom: 20px;">
      ‚ö†Ô∏è ‡∫Å‡∫≤‡∫ô‡ªÄ‡∫ï‡∫∑‡∫≠‡∫ô
    </h3>
    <p style="margin-bottom: 20px; color: #333;">
      ‡∫ó‡ªà‡∫≤‡∫ô‡∫à‡∫∞‡∫ñ‡∫∑‡∫Å‡∫≠‡∫≠‡∫Å‡∫à‡∫≤‡∫Å‡∫•‡∫∞‡∫ö‡∫ª‡∫ö‡ªÉ‡∫ô‡∫≠‡∫µ‡∫Å <strong id="countdown">${countdown}</strong> ‡∫ß‡∫¥‡∫ô‡∫≤‡∫ó‡∫µ
    </p>
    <p style="margin-bottom: 25px; color: #666; font-size: 14px;">
      ‡∫Å‡∫ª‡∫î‡∫õ‡∫∏‡ªà‡∫°‡∫•‡∫∏‡ªà‡∫°‡∫ô‡∫µ‡ªâ‡ªÄ‡∫û‡∫∑‡ªà‡∫≠‡∫™‡∫∑‡∫ö‡∫ï‡ªç‡ªà‡ªÉ‡∫ä‡ªâ‡∫á‡∫≤‡∫ô
    </p>
    <button id="stay-logged-in" style="
      background: #27ae60;
      color: white;
      border: none;
      padding: 12px 25px;
      border-radius: 5px;
      cursor: pointer;
      font-size: 16px;
      margin-right: 10px;
    ">
      ‡∫™‡∫∑‡∫ö‡∫ï‡ªç‡ªà‡ªÉ‡∫ä‡ªâ‡∫á‡∫≤‡∫ô
    </button>
    <button id="logout-now" style="
      background: #e74c3c;
      color: white;
      border: none;
      padding: 12px 25px;
      border-radius: 5px;
      cursor: pointer;
      font-size: 16px;
    ">
      ‡∫≠‡∫≠‡∫Å‡ªÄ‡∫•‡∫µ‡∫ç
    </button>
  `;

  modal.appendChild(modalContent);
  document.body.appendChild(modal);

 
  const countdownInterval = setInterval(() => {
    countdown--;
    const countdownElement = document.getElementById('countdown');
    if (countdownElement) {
      countdownElement.textContent = countdown;
    }
    
    if (countdown <= 0) {
      clearInterval(countdownInterval);
      performAutoLogout();
    }
  }, 1000);

 
  const stayButton = document.getElementById('stay-logged-in');
  const logoutButton = document.getElementById('logout-now');
  
  if (stayButton) {
    stayButton.onclick = () => {
      clearInterval(countdownInterval);
      hideWarningModal();
      startAutoLogoutTimer();
    };
  }

  if (logoutButton) {
    logoutButton.onclick = () => {
      clearInterval(countdownInterval);
      performAutoLogout();
    };
  }
}

function hideWarningModal() {
  if (process.server) return;
  
  const modal = document.getElementById('auto-logout-warning');
  if (modal) {
    modal.remove();
  }
  isWarningShown = false;
}

function resetTimerOnActivity() {
  if (process.server) return;
  

  localStorage.setItem("lastActivity", Date.now().toString());
  

  startAutoLogoutTimer();
}

function checkLastActivity() {
  if (process.server) return;
  
  const lastActivity = localStorage.getItem("lastActivity");
  const token = localStorage.getItem("token");
  
  if (!token) return;
  
  if (lastActivity) {
    const timeDiff = Date.now() - parseInt(lastActivity);
    
    if (timeDiff >= INACTIVE_TIME) {
    
      performAutoLogout();
      return;
    } else {
      
      const remainingTime = INACTIVE_TIME - timeDiff;
      const remainingWarningTime = WARNING_TIME - timeDiff;
      
      if (remainingWarningTime <= 0) {
      
        showWarningModal();
      } else {
       
        clearTimeout(logoutTimer);
        clearTimeout(warningTimer);
        
        warningTimer = setTimeout(() => {
          showWarningModal();
        }, remainingWarningTime);
        
        logoutTimer = setTimeout(() => {
          performAutoLogout();
        }, remainingTime);
      }
    }
  } else {
  
    startAutoLogoutTimer();
  }
}



function setupActivityTracking() {
  if (process.server) return;
  

  ACTIVITY_EVENTS.forEach(event => {
    document.removeEventListener(event, resetTimerOnActivity, true);
  });
  
 
  ACTIVITY_EVENTS.forEach(event => {
    document.addEventListener(event, resetTimerOnActivity, true);
  });


  document.addEventListener('visibilitychange', () => {
    if (!document.hidden) {
      checkLastActivity();
    }
  });
  

  window.addEventListener('focus', checkLastActivity);
  

  window.addEventListener('load', checkLastActivity);
}



export default defineNuxtRouteMiddleware((to, from) => {
 
  if (process.server) return;

  const token = localStorage.getItem("token");
  const user = localStorage.getItem("user");
  
 
  if (!token || !user) {
    return navigateTo({
      path: "/login",
      query: {
        redirect: to.fullPath,
      },
    });
  }

 
  if (token) {
    try {
     
      const payload = JSON.parse(atob(token.split('.')[1]));
      const now = Date.now() / 1000;
      
      if (payload.exp && payload.exp < now) {
       
        localStorage.removeItem("token");
        localStorage.removeItem("user");
        localStorage.removeItem("lastActivity");
        return navigateTo("/login");
      }
    } catch (error) {
      
      console.log("Token validation skipped:", error.message);
    }
  }

 
  if (process.client) {
   
    nextTick(() => {
     
      setupActivityTracking();
      
      
      checkLastActivity();
      
      console.log("üõ°Ô∏è Auto Logout System activated");
      console.log(`‚è∞ Timeout: ${INACTIVE_TIME / 1000 / 60} minutes`);
      console.log(`‚ö†Ô∏è Warning at: ${WARNING_TIME / 1000 / 60} minutes`);
    });
  }
});



if (process.client) {
  
  window.addEventListener('beforeunload', () => {
    clearTimeout(logoutTimer);
    clearTimeout(warningTimer);
  });
  
  
  window.addEventListener('pagehide', () => {
    clearTimeout(logoutTimer);
    clearTimeout(warningTimer);
  });
}




if (process.client) {
  window.authMiddleware = {
    startTimer: startAutoLogoutTimer,
    stopTimer: () => {
      clearTimeout(logoutTimer);
      clearTimeout(warningTimer);
      hideWarningModal();
    },
    resetTimer: resetTimerOnActivity,
    checkActivity: checkLastActivity,
    forceLogout: performAutoLogout
  };
}